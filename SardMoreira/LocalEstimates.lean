import Mathlib.Analysis.Calculus.ContDiff.Defs
import Mathlib.Analysis.SpecialFunctions.Pow.Real

import Mathlib.Analysis.Calculus.LineDeriv.Basic
import Mathlib.MeasureTheory.Integral.Bochner
import Mathlib.MeasureTheory.Measure.Haar.OfBasis
import Mathlib.Order.CompletePartialOrder
import Mathlib.MeasureTheory.Integral.SetIntegral

open scoped unitInterval Topology
open Asymptotics Filter

section NormedField

variable {ùïú E F G : Type*} --[NontriviallyNormedField ùïú]
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
--  [NormedAddCommGroup G] [NormedSpace ùïú G]


open scoped Convex
open MeasureTheory

-- Lemma 8 in the blueprint: the statement might be slightly off, check carefully!
lemma cdh_at_sub_affine_le_of_meas {f : E ‚Üí F} {a b : E} {C r : NNReal} {Œ¥ : ‚Ñù} (hŒ¥ : Œ¥ ‚àà (Set.Ioo (0 : ‚Ñù) 1))
    (hf : DifferentiableOn ‚Ñù f [a -[‚Ñù] b])
    (hf' : ‚àÄ t : ‚Ñù, t ‚àà I ‚Üí
      ‚ÄñlineDeriv ‚Ñù f (a + t ‚Ä¢ (b - a)) (b - a)‚Äñ ‚â§ C * (t ^ r.toReal) * ‚Äñb - a‚Äñ‚Çä ^ (1 + r).toReal)
    {s : Set ‚Ñù} (hsmeas : 1 - Œ¥ ‚â§ (volume (I ‚à© s)).toReal)
    (hs' : ‚àÄ t : ‚Ñù, t ‚àà s ‚Üí lineDeriv ‚Ñù f (a + t ‚Ä¢ (b - a)) (b - a) = 0) :
    ‚Äñf b - f a‚Äñ ‚â§ C * Œ¥ * (‚Äñb - a‚Äñ‚Çä ^ (1 + r).toReal) := by

  have aux‚ÇÅ : volume I = 1 := sorry -- surely in mathlib
  have asdf := calc (volume (I ‚à© s·∂ú)).toReal + (volume (I ‚à© s)).toReal
        _ ‚â§ (volume ((I ‚à© s·∂ú) ‚à™ (I ‚à© s))).toReal := by
          let asdf := MeasureTheory.measure_union_le (I ‚à© s·∂ú) (I ‚à© s) (Œº := volume)
          have : volume (I ‚à© s) < ‚ä§ := by
            trans 1; swap; simp
            rw [‚Üê aux‚ÇÅ]
            have : I ‚à© s ‚äÜ I := by exact Set.inter_subset_left
            sorry -- let asdf := volume.mono this
          -- similarly for the other sets, hence asdf should imply the claim
          -- (or, better idea: see if one can choose the numbers more wisely to avoid this hassle)
          sorry
        _ = (volume I).toReal := by
          congr
          -- the following is surely in mathlib
          have : ‚àÄ a b c : Set ‚Ñù, (a ‚à© b) ‚à™ (a ‚à© c) = a ‚à© (b ‚à™ c) := by
            intro a b c
            ext x
            simp
            aesop
          have : I ‚à© s·∂ú ‚à™ I ‚à© s = (I ‚à© (s ‚à™ s·∂ú)) := by rw [Set.union_comm s]; exact this I s·∂ú s
          rw [this, Set.union_compl_self s, Set.inter_univ]
        _ = 1 := by rw [aux‚ÇÅ]; simp
  have hscompl : (volume (I ‚à© s·∂ú)).toReal ‚â§ Œ¥ := calc (volume (I ‚à© s·∂ú)).toReal
    _ ‚â§ 1 - (volume (I ‚à© s)).toReal := by linarith [asdf]
    _ ‚â§ 1 - (1 - Œ¥) := by gcongr
    _ = Œ¥ := by ring

  calc ‚Äñf b - f a‚Äñ
    _ = ‚Äñ‚à´ t in I, lineDeriv ‚Ñù f (a + t ‚Ä¢ (b - a)) (b - a)‚Äñ := by
      sorry -- standard form of MVT, somewhere in mathlib

    -- use MeasureTheory.norm_setIntegral_le_of_norm_le_const_ae for the next few steps,
    -- move part of these steps into showing the hypothesis
    _ = ‚Äñ‚à´ t in I ‚à© s·∂ú, lineDeriv ‚Ñù f (a + t ‚Ä¢ (b - a)) (b - a)‚Äñ := by
      -- everywhere else, is zero
      -- like setIntegral_eq_integral_of_forall_compl_eq_zero, but with set integrals...
      sorry
    _ ‚â§ ‚à´ t in I ‚à© s·∂ú, ‚ÄñlineDeriv ‚Ñù f (a + t ‚Ä¢ (b - a)) (b - a)‚Äñ := by
      sorry --exact?--sorry
    _ ‚â§ ‚à´ t in I ‚à© s·∂ú, C * (t ^ r.toReal) * ‚Äñb - a‚Äñ‚Çä ^ (1 + r).toReal := by
      sorry
    _ = C * ‚Äñb - a‚Äñ‚Çä ^ (1 + r).toReal * ‚à´ t in I ‚à© s·∂ú, (t ^ r.toReal) := sorry
    -- the following estimate is not ideal, but good enough
    _ ‚â§ C * ‚Äñb - a‚Äñ‚Çä ^ (1 + r).toReal * (volume (I ‚à© s·∂ú)).toReal := by
      gcongr
      calc ‚à´ (t : ‚Ñù) in I ‚à© s·∂ú, t ^ r.toReal
        _ ‚â§ ‚à´ (t : ‚Ñù) in I ‚à© s·∂ú, 1 := by
          apply MeasureTheory.setIntegral_mono_on -- XXX: is using the Lebesgue integral nicer?
          ¬∑ sorry -- integrability hypothesis; follows since continuous
          ¬∑ have aux := MeasureTheory.integrableOn_const (E := ‚Ñù) (s := I ‚à© s·∂ú) (C := (1 : ‚Ñù)) (Œº := volume)
            rw [aux]
            right
            sorry -- ‚â§ Œ¥ is proven in hscompl
          ¬∑ have : MeasurableSet s := by -- if not automatic, add as assumption
              by_contra! h
              have : volume s = 0 := by sorry -- follows by junk value, right?
              have : volume (I ‚à© s) = 0 := measure_inter_null_of_null_right I this
              simp [this] at hsmeas
              exact (lt_self_iff_false 1).mp (by linarith [hŒ¥.2, hsmeas])
            measurability
          intro x hx
          have : x ‚àà I := hx.1
          -- remain: 0 ‚â§ x ‚â§ 1 implies x ^ r is at most 1
          -- not hard (e.g. use that this function is increasing on I); in mathlib?
          sorry
        _ = (volume (I ‚à© s·∂ú)).toReal := by
          have aux := setIntegral_const (s := I ‚à© s·∂ú) (c := (1 : ‚Ñù)) (Œº := volume)
          rw [aux]
          simp
    _ ‚â§ C * ‚Äñb - a‚Äñ‚Çä ^ (1 + r).toReal * Œ¥ := by gcongr
    _ = C * Œ¥ * ‚Äñb - a‚Äñ‚Çä ^ (1 + r).toReal := by ring
