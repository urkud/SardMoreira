import Mathlib

open scoped Topology ENNReal
open MeasureTheory Filter Set Function Metric

/-- If $s_b$ is a family of sets such that $\{(a, b) \mid a \in s_b\}$ is a measurable set,
then for any s-finite measure $\mu$, the function $b \mapsto \mu(s_b)$ is measurable.

This is a version of `measurable_measure_prod_mk_right`. -/
theorem Measurable.measure_apply {Œ± Œ≤ : Type*} [MeasurableSpace Œ±] [MeasurableSpace Œ≤]
    (Œº : Measure Œ±) [SFinite Œº] (s : Œ≤ ‚Üí Set Œ±) (hs : MeasurableSet {p : Œ± √ó Œ≤ | p.1 ‚àà s p.2}) :
    Measurable fun b ‚Ü¶ Œº (s b) :=
  measurable_measure_prod_mk_right hs

theorem Metric.biInter_lt_rat_closedBall {X : Type*} [PseudoMetricSpace X] (x : X) (r : ‚Ñù) :
    closedBall x r = ‚ãÇ (q : ‚Ñö) (_ : r < q), closedBall x q := by
  ext
  simpa only [mem_iInter‚ÇÇ, mem_closedBall] using le_iff_forall_lt_rat_imp_le

theorem forall_lt_le_iff {Œ± : Type*} [LinearOrder Œ±] [DenselyOrdered Œ±] {a b : Œ±} :
    (‚àÄ c < a, c ‚â§ b) ‚Üî a ‚â§ b :=
  ‚ü®le_of_forall_ge_of_dense, fun hab _c hca ‚Ü¶ hca.le.trans hab‚ü©

theorem forall_gt_ge_iff {Œ± : Type*} [LinearOrder Œ±] [DenselyOrdered Œ±] {a b : Œ±} :
    (‚àÄ c, a < c ‚Üí b ‚â§ c) ‚Üî b ‚â§ a :=
  forall_lt_le_iff (Œ± := Œ±·µí·µà)

theorem Metric.biInter_lt_closedBall {X : Type*} [PseudoMetricSpace X] (x : X) (r : ‚Ñù) :
    ‚ãÇ r' > r, closedBall x r' = closedBall x r := by
  ext
  simp [forall_gt_ge_iff]

theorem eventually_forall_le_continuousWithinAt_Ici_measure_closedBall
    {X : Type*} [PseudoMetricSpace X] [MeasurableSpace X] [OpensMeasurableSpace X]
    (Œº : Measure X) [IsLocallyFiniteMeasure Œº] (x : X) :
    ‚àÄ·∂† r : ‚Ñù in ùìù 0, ‚àÄ ŒΩ ‚â§ Œº, ContinuousWithinAt (ŒΩ <| closedBall x ¬∑) (Set.Ici r) r := by
  rcases (Œº.finiteAt_nhds x).exists_mem_basis nhds_basis_closedBall with ‚ü®Œµ, Œµ‚ÇÄ, hŒµ‚ü©
  filter_upwards [eventually_lt_nhds Œµ‚ÇÄ] with r hr ŒΩ hŒΩ
  rw [‚Üê continuousWithinAt_Ioi_iff_Ici, ContinuousWithinAt]
  convert tendsto_measure_biInter_gt (by measurability) (by intros; gcongr)
    ‚ü®Œµ, hr, ((hŒΩ _).trans_lt hŒµ).ne‚ü©
  rw [biInter_lt_closedBall]

theorem eventually_continuousWithinAt_Ici_measure_inter_closedBall_div
    {X : Type*} [PseudoMetricSpace X] [MeasurableSpace X] [OpensMeasurableSpace X]
    (Œº : Measure X) [IsLocallyFiniteMeasure Œº] (x : X) {s : Set X} (hs : NullMeasurableSet s Œº) :
    ‚àÄ·∂† r : ‚Ñù in ùìù[>] 0,
      ContinuousWithinAt (fun r ‚Ü¶ Œº (s ‚à© closedBall x r) / Œº (closedBall x r)) (Set.Ici r) r := by
  by_cases hpos : ‚àÉ Œµ > 0, Œº (closedBall x r) = 0
  

theorem tendsto_measure_inter_closedBall_div_iff_rat
    {X : Type*} [PseudoMetricSpace X] [MeasurableSpace X] [OpensMeasurableSpace X]
    {Œº : Measure X} [IsLocallyFiniteMeasure Œº] {x : X} {a : ‚Ñù‚â•0‚àû} {s : Set X} :
    Tendsto (fun r ‚Ü¶ Œº (s ‚à© closedBall x r) / Œº (closedBall x r)) (ùìù[>] 0) (ùìù a) ‚Üî
      Tendsto (fun r : ‚Ñö ‚Ü¶ Œº (s ‚à© closedBall x r) / Œº (closedBall x r)) (ùìù[>] 0) (ùìù a) := by
  -- TODO split the proof into reusable lemmas.
  refine ‚ü®fun h ‚Ü¶ h.comp ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ rw [‚Üê Rat.cast_zero (Œ± := ‚Ñù)]
    refine Rat.continuous_coe_real.continuousWithinAt.tendsto_nhdsWithin fun r hr ‚Ü¶ ?_
    simpa
  ¬∑ rw [(closed_nhds_basis a).tendsto_right_iff]
    rintro U ‚ü®hU, hUc‚ü©
    rw [(nhdsWithin_Ioi_basis _).tendsto_left_iff] at h
    rcases h U hU with ‚ü®Œµ, hŒµ‚ÇÄ, hŒµ‚ü©
    rcases (Œº.finiteAt_nhds x).exists_mem_basis nhds_basis_closedBall with ‚ü®Œµ', hŒµ‚ÇÄ', hŒµ'‚ü©
    filter_upwards [Ioo_mem_nhdsWithin_Ioi' (b := (Œµ : ‚Ñù)) (mod_cast hŒµ‚ÇÄ),
      Ioo_mem_nhdsWithin_Ioi' hŒµ‚ÇÄ'] with Œ¥ hŒ¥‚ÇÅ hŒ¥‚ÇÇ
    
    

theorem MeasurableSet.setOf_tendsto_measure_sectl_inter_closedBall_div
    {X : Type*} [PseudoMetricSpace X] [MeasurableSpace X] [OpensMeasurableSpace X]
    {Œ± : Type*} [MeasurableSpace Œ±]
    (Œº : Measure X) {s : Set (X √ó Œ±)} (hs : MeasurableSet s) :
    MeasurableSet {p : X √ó Œ± |
      Tendsto (fun r : ‚Ñù ‚Ü¶ Œº ((¬∑, p.2) ‚Åª¬π' s  ‚à© closedBall p.1 r) / Œº (closedBall p.1 r)) (ùìù[>] 0)
        (ùìù (s.indicator 1 p))} := by
  
  sorry
